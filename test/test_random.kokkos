
#include <limits>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <sys/time.h>

#include <Kokkos_Core.hpp>

#include <Kokkos_Random.hpp>
#include <Kokkos_DualView.hpp>
#include <impl/Kokkos_Timer.hpp>

// A Functor for generating uint64_t random numbers templated on the
// GeneratorPool type
template <class GeneratorPool>
struct generate_random {
    // Output View for the random numbers
    Kokkos::View<uint64_t*> vals;

    // The GeneratorPool
    GeneratorPool rand_pool;

    int samples;

    // Initialize all members
    generate_random(Kokkos::View<uint64_t*> vals_, GeneratorPool rand_pool_, int samples_)
      : vals(vals_)
      , rand_pool(rand_pool_)
      , samples(samples_)
    {
    }
    KOKKOS_INLINE_FUNCTION
    void operator()(int i) const
    {
        // Get a random number state from the pool for the active thread
        typename GeneratorPool::generator_type rand_gen = rand_pool.get_state();

        // Draw samples numbers from the pool as urand64 between 0 and
        // rand_pool.MAX_URAND64 Note there are function calls to get other type of
        // scalars, and also to specify Ranges or get a normal distributed float.
        for (int k = 0; k < samples; k++) vals(i * samples + k) = rand_gen.urand64();

        // Give the state back, which will allow another thread to acquire it
        rand_pool.free_state(rand_gen);
    }
};

// void checkSizes( int &N, int &M, int &S, int &nrepeat );
void randomNumberTest();

int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    {
        randomNumberTest();
    }
    Kokkos::finalize();

    return 0;
}

void randomNumberTest()
{
    int size = 1024;
    int samples = 1024;
    int seed = 5374857;

    // Create two random number generator pools one for 64bit states and one for 1024 bit states Both take an 64 bit
    // unsigned integer seed to initialize a Random_XorShift64 generator which is used to fill the generators of the
    // pool.
    Kokkos::Random_XorShift64_Pool<> rand_pool64(seed);
    Kokkos::Random_XorShift1024_Pool<> rand_pool1024(seed);
    Kokkos::DualView<uint64_t*> vals("Vals", size * samples);

    // Run some performance comparisons
    Kokkos::Timer timer;
    Kokkos::parallel_for(size, generate_random<Kokkos::Random_XorShift64_Pool<> >(vals.d_view, rand_pool64, samples));
    Kokkos::fence();

    timer.reset();
    Kokkos::parallel_for(size, generate_random<Kokkos::Random_XorShift64_Pool<> >(vals.d_view, rand_pool64, samples));
    Kokkos::fence();
    double time_64 = timer.seconds();

    Kokkos::parallel_for(size,
                         generate_random<Kokkos::Random_XorShift1024_Pool<> >(vals.d_view, rand_pool1024, samples));
    Kokkos::fence();

    timer.reset();
    Kokkos::parallel_for(size,
                         generate_random<Kokkos::Random_XorShift1024_Pool<> >(vals.d_view, rand_pool1024, samples));
    Kokkos::fence();
    double time_1024 = timer.seconds();

    printf("\n\n#Time XorShift64*:   %e %e\n", time_64, 1.0e-9 * samples * size / time_64);
    printf("#Time XorShift1024*: %e %e\n", time_1024, 1.0e-9 * samples * size / time_1024);

    Kokkos::deep_copy(vals.h_view, vals.d_view);
}
