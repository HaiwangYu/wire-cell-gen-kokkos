#include "WireCellGenKokkos/KokkosArray.h"
#include "WireCellUtil/Array.h"

#include <iostream>
#include <typeinfo>

using namespace std;
using namespace WireCell;
using namespace WireCell::KokkosArray;

int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    {
        const int N0 = 2;
        const int N1 = 3;
        std::cout << "Space: " << typeid(Space).name() << std::endl;
        array_xxf A = Zero<array_xxf>(N0, N1);
        Kokkos::parallel_for("modify_A",
                             Kokkos::MDRangePolicy<Kokkos::Rank<2, Kokkos::Iterate::Left>>({0, 0}, {N0, N1}),
                             KOKKOS_LAMBDA(const Index& i0, const Index& i1) { A(i0, i1) = i0*10+i1; });
        array_xxc B = dft_rc(A);
        array_xxf C = idft_cr(B);

        array_xxc D = Zero<array_xxc>(N0, N1);
        D = dft_cc(B);
        std::cout << "A: " << dump_2d_view(A) << "B: " << dump_2d_view(B) << "C: " << dump_2d_view(C)
                  << "D: " << dump_2d_view(D);

        auto h_C = Kokkos::create_mirror_view(C);
        Kokkos::deep_copy(h_C, C);

        Eigen::Map<Eigen::ArrayXXf> out((float*) h_C.data(), h_C.extent(0), h_C.extent(1));
        cout << "Eigen:\n" << out << endl;


    }
    Kokkos::finalize();
    return 0;
}
